import 'package:fabrication2/Model/Product.widget.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_svg/svg.dart';import 'package:google_fonts/google_fonts.dart';import 'package:provider/provider.dart';class ConfirmerOrder extends StatefulWidget {  @override  _ConfirmerOrderState createState() => _ConfirmerOrderState();}class _ConfirmerOrderState extends State<ConfirmerOrder> {  List<Order> list = [];  @override  Widget build(BuildContext context) {    final PendingOrderh = Provider.of<List<Pending_Order>>(context);    return Theme(      data: ThemeData(          primaryColor: Colors.white,          accentColor: Colors.redAccent,          textTheme: TextTheme(            body1: GoogleFonts.cairo(),            title: GoogleFonts.cairo(),          )),      child: Scaffold(        appBar: AppBar(          title: Text(            "طلبياتي",            style: GoogleFonts.cairo(),          ),          centerTitle: true,        ),        body:   ListView.builder(            itemCount: PendingOrderh.length,            itemBuilder: (context, index) {              list.clear();              PendingOrderh[index].order.forEach((key, value) {                list.add(Order(                    name: value[0],                    qty: "1",                    price: value[1],                    pic: value[2]));              });              print(list);              return Item(list, index);            }),      ),    );  }}class Item extends StatefulWidget {  List<Order> list;  int index;  Item(this.list, this.index);  @override  _ItemState createState() => _ItemState();}class _ItemState extends State<Item> {  double totalsanslivraison = 0;  double prix_de_livraison = 0;  String remise;  double totalaveclivraison = 0;  @override  Widget build(BuildContext context) {    double height = MediaQuery.of(context).size.height;    double width = MediaQuery.of(context).size.width;    totalsanslivraison = 0;    for (int i = 0; i < widget.list.length; i++) {      totalsanslivraison +=          double.parse(widget.list[i].price) * double.parse(widget.list[i].qty);    }    totalaveclivraison = totalsanslivraison + prix_de_livraison;    return Column(      mainAxisAlignment: MainAxisAlignment.center,      crossAxisAlignment: CrossAxisAlignment.center,      children: [        SizedBox(          height: height * 0.02,        ),        Row(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            Padding(              padding : EdgeInsets.symmetric(horizontal: 10),              child: Row(children: [                SvgPicture.asset('assets/icons/receipt.svg'),                SizedBox(                  width: 3,                ),                Text("00${widget.index+1}", style: GoogleFonts.cairo(),),              ],),            ),            Align(                alignment: Alignment.centerRight,                child: Padding(                    padding: EdgeInsets.symmetric(horizontal: 10),                    child: Text(                      "العنوان :",                      style: GoogleFonts.cairo(color: Colors.black),                      textAlign: TextAlign.end,                      textDirection: TextDirection.rtl,                    ))),          ],        ),        Card(          elevation: 1,          child: Container(            margin: EdgeInsets.zero,            padding: EdgeInsets.zero,            width: double.infinity,            height: height * 0.14,            child: Padding(              padding: EdgeInsets.symmetric(horizontal: 5),              child: Stack(                children: [                  Positioned(                    top: 10,                    right: 3,                    child: SvgPicture.asset(                      "assets/icons/map-marker.svg",                      height: 25,                      width: 25,                    ),                  ),                ],              ),            ),          ),        ),        Align(            alignment: Alignment.centerRight,            child: Padding(                padding: EdgeInsets.symmetric(horizontal: 10),                child: Text(                  "معلومات حول الطلبية :",                  style: GoogleFonts.cairo(color: Colors.black),                  textAlign: TextAlign.end,                  textDirection: TextDirection.rtl,                ))),        Padding(          padding: EdgeInsets.symmetric(horizontal: width * 0.04),          child: Row(            mainAxisAlignment: MainAxisAlignment.end,            children: [              Text(                "معلومات الدفع",                style: GoogleFonts.cairo(                  color: Colors.black,                ),              ),            ],          ),        ),        SizedBox(          height: height * 0.01,        ),        Card(          elevation: 1,          child: Container(            margin: EdgeInsets.zero,            padding: EdgeInsets.zero,            width: double.infinity,            height: 0.22 * height,            child: Padding(                padding: EdgeInsets.symmetric(horizontal: 5),                child: Column(children: [                  Padding(                    padding: EdgeInsets.symmetric(vertical: 5, horizontal: 5),                    child: Row(                      mainAxisAlignment: MainAxisAlignment.spaceBetween,                      children: [                        Text(                          totalsanslivraison.toStringAsFixed(0) + " DA",                          style: GoogleFonts.muli(                              fontSize: 14,                              color: Colors.black,                              fontWeight: FontWeight.bold),                        ),                        Text(                          "ثمن المشتريات",                          style: GoogleFonts.cairo(                              fontSize: 14, color: Colors.black),                        ),                      ],                    ),                  ),                  Padding(                    padding: EdgeInsets.symmetric(vertical: 5, horizontal: 5),                    child: Row(                      mainAxisAlignment: MainAxisAlignment.spaceBetween,                      children: [                        Text(                          prix_de_livraison.toStringAsFixed(0) + " DA",                          style: GoogleFonts.muli(                              fontSize: 14,                              color: Colors.black,                              fontWeight: FontWeight.bold),                        ),                        Text(                          "ثمن التوصيل",                          style: GoogleFonts.cairo(                              fontSize: 14, color: Colors.black),                        ),                      ],                    ),                  ),                  Padding(                    padding: EdgeInsets.symmetric(vertical: 5, horizontal: 5),                    child: Row(                      mainAxisAlignment: MainAxisAlignment.spaceBetween,                      children: [                        Text(                          " - " +                              ((double.parse(remise) / 100) *                                  totalsanslivraison)                                  .toString() +                              " DA",                          style: GoogleFonts.muli(                              fontSize: 14,                              color: Colors.green,                              fontWeight: FontWeight.bold),                        ),                        Text(                          "التخفيض",                          style: GoogleFonts.cairo(                              fontSize: 14, color: Colors.black),                        ),                      ],                    ),                  ),                  Padding(                    padding: EdgeInsets.symmetric(vertical: 5, horizontal: 5),                    child: Row(                      mainAxisAlignment: MainAxisAlignment.spaceBetween,                      children: [                        Text(                          (totalaveclivraison -                              (double.parse(remise) /                                  100 *                                  totalsanslivraison))                              .toStringAsFixed(0) +                              " DA",                          style: GoogleFonts.muli(                              fontSize: 14,                              color: Colors.redAccent,                              fontWeight: FontWeight.bold),                        ),                        Text(                          "المجموع",                          style: GoogleFonts.cairo(                              fontSize: 14, color: Colors.black),                        ),                      ],                    ),                  ),                ])),          ),        ),        SizedBox(          height: height * 0.01,        ),        SizedBox(          height: height * 0.01,        ),        Container(          height: 0.7,          color: Colors.grey,        ),      ],    );  }}class Pro{  String name ;  String qty ;  String price ;  String pic ;  Map<String ,dynamic> sauces ;  String tailles ;  Map<String ,dynamic> fromages ;  Pro({this.name,this.qty,this.price,this.pic,this.sauces,this.tailles,this.fromages});}class CartCard extends StatefulWidget {  Map<String ,dynamic> product ;  CartCard(this.product);  @override  _CartCardState createState() => _CartCardState();}class _CartCardState extends State<CartCard> {  List<Pro> p = [];  @override  Widget build(context) {    double height = MediaQuery.of(context).size.height ;    double width = MediaQuery.of(context).size.width ;    p.clear();    this.widget.product.forEach((key, value) {      p.add(Pro(name: value[0],pic: value[3],qty: value[1],price: value[2],tailles: value[4],          sauces: value[5],fromages:value[6]));    });    return Container(      height:height * p.length * 0.085,      child: ListView.builder(          itemCount: p.length ,          physics :  NeverScrollableScrollPhysics(),          itemBuilder: (context,index) {            List<dynamic>  items = [];            items.clear();            items.add("الاضافات");            p[index].sauces.forEach((key, value) {              if (value != null) {                items.add("Sauces:");                items.addAll(value);                print(items);              }            });            p[index].fromages.forEach((key, value) {              if (value != null) {                items.add("Sauces:");                items.addAll(value);                print(items);              }            });            // if (p[index].sauces != null){            //   items.clear();            //   items.add("الاضافات");            //   items.add("Sauces:");            //   for (int i = 0 ; i < p[index].sauces.length;   i ++) {            //     items.add(widget.product.sauces[i]);            //     print(widget.product.sauces[i]);            //   }            //   if (widget.product.fromages != null) {            //     items.add("Fromages:");            //     for (int i = 0 ; i < widget.product.fromages.length;   i ++) {            //       items.add(widget.product.fromages[i]);            //     }            //   }            //            // }            return Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                Padding(                  padding: EdgeInsets.only(left: 5),                  child: Column(                    crossAxisAlignment: CrossAxisAlignment.start,                    children: [                      p[index].tailles == null ?                      Text(                        p[index].name,                        style: GoogleFonts.cairo(color: Colors.black, fontSize: 16),                        maxLines: 2,                      ) : Text(                        p[index].name + " " + p[index].tailles,                        style: GoogleFonts.cairo(color: Colors.black, fontSize: 16),                        maxLines: 2,                      ),                      Text.rich(                        TextSpan(                          text: "\DA ${p[index].price}",                          style: GoogleFonts.cairo(                              fontWeight: FontWeight.w600, color: Colors.redAccent),                          children: [                            TextSpan(                                text: " x${p[index].qty}",                                style: Theme.of(context).textTheme.bodyText1),                          ],                        ),                      ),                    ],                  ),                ),                Row(                  children: [                    items.length > 1 ?      DropdownButton<String>(                      value: items[0],                      style: GoogleFonts.cairo(),                      onChanged: ( Value) {                        setState(() {                        });                      },                      items: items.map(                              (iteme) {                            return  DropdownMenuItem<String>(                              value: iteme,                              child: Row(                                children: <Widget>[                                  Text(                                    iteme,                                    style:  GoogleFonts.cairo(color: iteme != "Fromages:" && iteme != "Sauces:"? Colors.black :Colors.redAccent,fontSize: 10),                                  ),                                ],                              ),                            );                          }                      ).toList(),                    ) : Container(),                    SizedBox(                      width: 5,                    ),                    SizedBox(                      width: 50,                      child: AspectRatio(                        aspectRatio: 1.5,                        child: Container(                          decoration: BoxDecoration(                            color: Color(0xFFF5F6F9),                            borderRadius: BorderRadius.circular(15),                          ),                          child: Image.network(p[index].pic),                        ),                      ),                    ),                  ],                ),              ],            );          }),    );  }}